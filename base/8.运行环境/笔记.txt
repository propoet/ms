1.网页加载过程
    题目:
        输入url到渲染出页面的整个过程
        window.onload 和DOMContentLoaded区别
            load:页面全部加载完,包括图片视频
            DOMContentLoaded dom渲染完即可执行,此时图片视频可能还没有加载完
    知识点:
        加载资源的形式
            html代码
            媒体文件,如图片,视频等
            javascript css

        加载资源的过程
            DNS解析:域名->IP地址
            浏览器根据IP地址向服务器发送http请求
            服务器接收到请求,服务器处理http请求,并返回给浏览器

        渲染页面的过程
            渲染过程1:
                根据html代码生成DOM Tree
                根据css代码生成cssOM  css对象模型
                将DOMTree 和cssOM整合成 renderTree
            渲染过程2
                根据renderTree 渲染页面
                如果遇到script 暂停渲染,优先加载并执行js,完成后再继续
                直至把renderTree 渲染完成

2.性能优化
    性能优化原则:
        多使用内存,缓存或其他方法
        减少cpu计算量,减少网络加载耗时
        空间换时间
    从何入手
        让加载更快
            减少资源体积:压缩代码
            减少访问次数:合并代码,ssr服务端渲染,缓存
                缓存: 静态资源加hash后缀,根据文件内容计算hash,文件内容不变,则hash不变,url不会变,url和文件不变,
                    会自动触发http缓存机制,返回304
                    使用cdn
                ssr:将网页和数据一起加载,一起渲染
        让渲染更快
            css 放在head里,js放在body 最后
            尽早开始执行js,用DOMContentLoaded触发
            图片懒加载
            对DOM 查询进行缓存
            频繁的DOM操作,合并一起插入到DOM 操作
            节流 throttle  防抖 debounce(用户输入结束或者暂停的时候,触发change)

3.安全
    常见web前端攻击方式
        xss:跨站请求攻击
            博客网站 发表博客 签入script脚本,脚本内容获取访问者cookie,发送到我的服务器(服务器配合跨域)
            预防:
                替换特殊字符,<> &lt;&gt;
                xss工具  npm
        xsrf:跨站请求伪造
            发送图片 带有支付
            预防:
                使用post接口,
                增加验证,支付密码